import { app, BrowserWindow, Menu, dialog, ipcMain } from 'electron';
import fs from 'fs';
import path from 'path';

import Database from './electron/db/db_connector';
// This allows TypeScript to pick up the magic constants that's auto-generated by Forge's Webpack
// plugin that tells the Electron app where to look for the Webpack-bundled app code (depending on
// whether you're running in development or production).
declare const MAIN_WINDOW_WEBPACK_ENTRY: string;
declare const MAIN_WINDOW_PRELOAD_WEBPACK_ENTRY: string;


const database = new Database();

(async () => {
    await database.initializeTables();
    if (!database.isInitialized()) {
        console.error('Database is not initialized. Exiting application.');
        app.quit();
    }
})();

// Handle creating/removing shortcuts on Windows when installing/uninstalling.
if (require('electron-squirrel-startup')) {
    app.quit();
}

const createWindow = (): void => {
    // Create the browser window.
    const mainWindow = new BrowserWindow({
        height: 1000,
        width: 1200,
        webPreferences: {
            //nodeIntegration: true,,
            preload: MAIN_WINDOW_PRELOAD_WEBPACK_ENTRY,
        },
    });

    // and load the index.html of the app.
    mainWindow.loadURL(MAIN_WINDOW_WEBPACK_ENTRY);

    // Open the DevTools.
    // mainWindow.webContents.openDevTools();

    // Set up the custom menu
    const menu = Menu.buildFromTemplate([
        {
            label: app.name, // App-Name als Menüeintrag (Standard auf macOS)
            submenu: [
                {
                    label: 'Beenden',
                    accelerator: 'CmdOrCtrl+Q', // Shortcut für Command + Q
                    click: () => {
                        app.quit(); // Beendet die App
                    },
                },
            ],
        },
        {
            label: 'Datei',
            submenu: [
                {
                    label: 'Ordner importieren',
                    click: async () => {
                        const result = await dialog.showOpenDialog(mainWindow, {
                            properties: ['openDirectory'],
                        });
                        if (!result.canceled && result.filePaths.length > 0) {
                            console.log('Ordner importiert:', result.filePaths[0]);
                            // Hier kannst du die Logik für den Ordner-Import hinzufügen
                        }
                    },
                },
                {
                    label: 'Datei öffnen',
                    click: async () => {
                        const result = await dialog.showOpenDialog(mainWindow, {
                            properties: ['openFile'],
                        });
                        if (!result.canceled && result.filePaths.length > 0) {
                            console.log('Datei geöffnet:', result.filePaths[0]);
                            // Hier kannst du die Logik für das Öffnen der Datei hinzufügen
                        }
                    },
                },
                {
                    label: 'Debugger umschalten',
                    click: () => {
                        if (mainWindow.webContents.isDevToolsOpened()) {
                            mainWindow.webContents.closeDevTools();
                        } else {
                            mainWindow.webContents.openDevTools();
                        }
                    },
                },
            ],
        },
    ]);

    Menu.setApplicationMenu(menu);
};

// This method will be called when Electron has finished
// initialization and is ready to create browser windows.
// Some APIs can only be used after this event occurs.
app.on('ready', createWindow);

// Quit when all windows are closed, except on macOS. There, it's common
// for applications and their menu bar to stay active until the user quits
// explicitly with Cmd + Q.
app.on('window-all-closed', () => {
    if (process.platform !== 'darwin') {
        app.quit();
    }
});

app.on('activate', () => {
    // On OS X it's common to re-create a window in the app when the
    // dock icon is clicked and there are no other windows open.
    if (BrowserWindow.getAllWindows().length === 0) {
        createWindow();
    }
});

// In this file you can include the rest of your app's specific main process
// code. You can also put them in separate files and import them here.


ipcMain.handle('open-midi-file', async () => {
    const { filePaths } = await dialog.showOpenDialog({
        properties: ['openFile'],
        filters: [{ name: 'MIDI Files', extensions: ['mid', 'midi'] }]
    });
    try {
        if (filePaths[0]) {
            let ret = {
                filePath: filePaths[0],
                fileName: path.basename(filePaths[0]),
                fileDir: path.dirname(filePaths[0]),
                fileExt: path.extname(filePaths[0]),
                data: fs.readFileSync(filePaths[0])
            }
            return ret;
        }
    } catch (err) {
        console.error('Fehler beim Laden der MIDI-Datei:', err);
    }
    return null;
});

ipcMain.handle('load-soundfont', async (_event, soundfontName: string) => {
    try {
        // Absoluten Pfad ermitteln, falls nötig
        let resolvedPath = path.join(app.getAppPath(), "soundfont", soundfontName);
        const data = fs.readFileSync(resolvedPath);
        return data.buffer.slice(data.byteOffset, data.byteOffset + data.byteLength); // ArrayBuffer
    } catch (err) {
        console.error('Fehler beim Laden des Soundfonts:', err);
        return null;
    }
});
